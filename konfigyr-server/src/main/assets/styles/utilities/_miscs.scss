@use "sass:map";
@import "../colors";

// Text alignment
.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

// Muted text color
.muted {
  color: var(--muted-color);
}

// Radius
.border-radius {
  border-radius: var(--border-radius);
}

.rounded {
  border-radius: 100%;
}

// Display utilities
.d-block {
  display: block !important;
}

.d-flex {
  display: flex !important;
}

.d-inline {
  display: inline-block !important;
}

.d-none {
  display: none !important;
}

$spacers: (
        0: 0,
        1: $spacer * .25,
        2: $spacer * .5,
        3: $spacer,
        4: $spacer * 1.5,
        5: $spacer * 3,
        6: $spacer * 4,
        7: $spacer * 5,
        8: $spacer * 6,
        9: $spacer * 8,
) !default;

$utilities: (
  // Padding
        "padding": (
                property: padding,
                class: p,
                values: $spacers
        ),
        "padding-x": (
                property: padding-right padding-left,
                class: px,
                values: $spacers
        ),
        "padding-y": (
                property: padding-top padding-bottom,
                class: py,
                values: $spacers
        ),
        "padding-top": (
                property: padding-top,
                class: pt,
                values: $spacers
        ),
        "padding-end": (
                property: padding-right,
                class: pe,
                values: $spacers
        ),
        "padding-bottom": (
                property: padding-bottom,
                class: pb,
                values: $spacers
        ),
        "padding-start": (
                property: padding-left,
                class: ps,
                values: $spacers
        ),
  // Margin
        "margin": (
                property: margin,
                class: m,
                values: $spacers
        ),
        "margin-x": (
                property: margin-right margin-left,
                class: mx,
                values: $spacers
        ),
        "margin-y": (
                property: margin-top margin-bottom,
                class: my,
                values: $spacers
        ),
        "margin-top": (
                property: margin-top,
                class: mt,
                values: $spacers
        ),
        "margin-end": (
                property: margin-right,
                class: me,
                values: $spacers
        ),
        "margin-bottom": (
                property: margin-bottom,
                class: mb,
                values: $spacers
        ),
        "margin-start": (
                property: margin-left,
                class: ms,
                values: $spacers
        ),
);

$color-mappings: (
        "white": $white,
        "primary": var(--primary),
        "secondary": var(--secondary),
        "contrast": var(--contrast),
        "black": $black,
);

@mixin generate-utility($utility) {
  $values: map.get($utility, 'values');
  $property-class: map.get($utility, 'class');

  @each $key, $value in $values {
    $properties: map.get($utility, 'property');

    .#{$property-class + '-' + $key} {
      @each $property in $properties {
        #{$property}: $value !important;
      }
    }
  }
}

@mixin generate-color-utility($color, $property, $value, $prefix) {
  .#{$prefix + '-' + $color} {
    #{$property}: $value !important;
  }
}

// Loop over each utility property
@each $key, $utility in $utilities {
  @include generate-utility($utility);
}

// Loop over each color mappings
@each $key, $value in $color-mappings {
  @include generate-color-utility($key, color, $value, 'color');
  @include generate-color-utility($key, background-color, $value, 'bg');
}
