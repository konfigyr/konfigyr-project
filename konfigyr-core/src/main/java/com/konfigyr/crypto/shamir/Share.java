package com.konfigyr.crypto.shamir;

import com.konfigyr.io.ByteArray;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Base64;
import org.springframework.lang.NonNull;
import org.springframework.util.Assert;

import java.io.Serial;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.function.Supplier;

/**
 * Represents a shared secret part that is generated by the {@link Shamir Shamir Secret Sharing alforithm}.
 * <p>
 * A Share consists of an index and a value. In the context of Shamir's secret sharing, the index and the value
 * correspond to the point (index, value) in a finite field.
 *
 * @author Vladimir Spasic
 * @since 1.0.0,
 * @param index the index of the share, can not be negative
 * @param value the value of the share, can not be {@literal null}
 * @see Shamir
 */
@Slf4j
public record Share(int index, ByteArray value) implements Supplier<String>, Comparable<Share>, Serializable {

	@Serial
	private static final long serialVersionUID = 3838515107166328896L;

	/**
	 * Creates a new Shamir secret share part from index and byte array value.
	 *
	 * @param index the index of the share, can not be negative
	 * @param value the value of the share, can not be {@literal null}
	 */
	public Share(int index, byte[] value) {
		this(index, new ByteArray(value));
	}

	public Share {
		Assert.isTrue(index > 0, "Share index must be greater than 0");
		Assert.isTrue(index <= 255, "Share index must not be greater than 255");
		Assert.notNull(value, "Share byte array value cannot be null");
		Assert.isTrue(!value.isEmpty(), "Share byte array value cannot be empty");
	}

	/**
	 * Creates a {@link Share} from it's <code>Base64</code> encoded value.
	 *
	 * @param value encoded value
	 * @return decoded share, never {@literal null}
	 * @throws IllegalArgumentException when encoded value is invalid
	 */
	public static Share from(String value) {
		Assert.hasText(value, "Encoded share value cannot be blank");

		final ByteBuffer buffer = ByteBuffer.wrap(Base64.decodeBase64(value));
		int index = buffer.getInt();

		final byte[] data = new byte[buffer.remaining()];
		buffer.get(data);
		buffer.clear();

		return new Share(index, data);
	}

	/**
	 * Returns the <code>Base64</code> encoded share value that can be provided to the application
	 * in order to recreate the secret key.
	 *
	 * @return encoded share value, never {@literal null}
	 */
	@NonNull
	@Override
	public String get() {
		// allocate the byte buffer with size of (index byte size = 4) + (share value size)
		final ByteBuffer buffer = ByteBuffer.allocate(length() + 4);
		buffer.putInt(index);
		buffer.put(value.array());

		return Base64.encodeBase64URLSafeString(buffer.array());
	}

	/**
	 * The byte size of the Shamir share value.
	 *
	 * @return the share byte size
	 */
	public int length() {
		return value.size();
	}

	@Override
	public int compareTo(@NonNull Share o) {
		return Integer.compare(index, o.index);
	}
}
