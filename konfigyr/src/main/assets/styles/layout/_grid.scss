@use "sass:map";
@import "../settings";
@import "../helpers/breakpoints";

/**
 * Grid and containers
 * Minimal grid system with auto-layout columns
 */

.container,
.container-fluid {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--konfigyr-spacing);
  padding-left: var(--konfigyr-spacing);
}

.container {
  $first-breakpoint: true;
  @each $key, $values in $breakpoints {
    @if $values {
      @media (min-width: map.get($values, "breakpoint")) {
        max-width: map.get($values, "viewport");
        @if $first-breakpoint {
          $first-breakpoint: false;
          padding-right: 0;
          padding-left: 0;
        }
      }
    }
  }
}

// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row($gutter) {
  --gutter-x: #{$gutter};
  --gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
  margin-top: calc(-1 * var(--gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready() {
  box-sizing: border-box;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--gutter-y);
}

@mixin make-col($size: false, $columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(calc($size / $columns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns) {
  $num: calc($size / $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: percentage(calc(1 / $count));
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($columns: 12, $row-columns: 6, $gutter: $spacer, $breakpoints: $breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        @include make-col-auto();
      }

      @if $row-columns > 0 {
        @for $i from 1 through $row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

.row {
  @include make-row($spacer);

  > * {
    @include make-col-ready();
  }
}

@include make-grid-columns();
