plugins {
    id 'java-library'
    id 'org.springframework.boot'
    id 'com.github.node-gradle.node' version '7.1.0'
}

dependencies {
    api project(':konfigyr-core')
    api project(':konfigyr-data')

    /* Spring Boot starter */
    api 'org.springframework.boot:spring-boot-starter-jooq'

    /* Spring Cache and Caffeine implementation */
    api 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    /* Spring OAuth Client Security starter */
    api 'org.springframework.boot:spring-boot-starter-oauth2-client'

    /* Spring Common libraries */
    api 'org.springframework.retry:spring-retry'

    /* Spring JDBC session implementation */
    implementation 'org.springframework.session:spring-session-jdbc'

    /* Konfigyr Mail using SMTP and Thymeleaf template engine */
    implementation('com.konfigyr:konfigyr-mail-smtp')
    implementation('com.konfigyr:konfigyr-mail-thymeleaf')

    /* Spring Boot Thymeleaf */
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    /* Liquibase - migrations runtime  */
    implementation 'org.liquibase:liquibase-core'

    /* Postgresql driver */
    implementation 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation project(':konfigyr-test')
    testImplementation 'org.seleniumhq.selenium:htmlunit3-driver'
    testImplementation 'org.thymeleaf:thymeleaf-testing-spring6:3.1.0.M2'
}

node {
    npmCommand = String.valueOf(getProperty('node.npm'))

    /* use the CI NPM command when executing Github actions */
    npmInstallCommand = System.getenv('CI') ? 'ci' : 'install'
}

tasks.register('rollup', NpmTask) {
    dependsOn npmInstall

    args = ['run', 'build']

    /* define inputs for the task in order to run only when the inputs change */
    inputs.files('package.json', 'package-lock.json', 'rollup.config.js')
    inputs.dir('src/main/assets')
    inputs.dir(fileTree("node_modules").exclude(".cache"))

    /* mark the dist as the output directory */
    outputs.dir(project.layout.buildDirectory.dir('resources/main/dist'))
}

tasks.register('npmTest', NpmTask) {
    dependsOn npmInstall

    args = ['test']

    /* define inputs for the test task in order to run only when the related files change */
    inputs.files('package.json', 'package-lock.json', '.eslintrc.json', '.prettierrc.json')
    inputs.dir('src/main/assets/scripts')
}

processResources.dependsOn('rollup')
check.dependsOn('npmTest')
